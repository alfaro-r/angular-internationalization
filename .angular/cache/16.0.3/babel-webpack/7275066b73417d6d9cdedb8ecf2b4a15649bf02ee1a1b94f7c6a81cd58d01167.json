{"ast":null,"code":"import _defineProperty from \"C:/Alfaro/App/Angular/_angular-project/angular-internationalization/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, Inject, Directive, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\nclass TranslateLoader {}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nclass TranslateFakeLoader extends TranslateLoader {\n  getTranslation(lang) {\n    return of({});\n  }\n}\n_defineProperty(TranslateFakeLoader, \"\\u0275fac\", /* @__PURE__ */function () {\n  let ɵTranslateFakeLoader_BaseFactory;\n  return function TranslateFakeLoader_Factory(t) {\n    return (ɵTranslateFakeLoader_BaseFactory || (ɵTranslateFakeLoader_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateFakeLoader)))(t || TranslateFakeLoader);\n  };\n}());\n_defineProperty(TranslateFakeLoader, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TranslateFakeLoader,\n  factory: TranslateFakeLoader.ɵfac\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateFakeLoader, [{\n    type: Injectable\n  }], null, null);\n})();\nclass MissingTranslationHandler {}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nclass FakeMissingTranslationHandler {\n  handle(params) {\n    return params.key;\n  }\n}\n_defineProperty(FakeMissingTranslationHandler, \"\\u0275fac\", function FakeMissingTranslationHandler_Factory(t) {\n  return new (t || FakeMissingTranslationHandler)();\n});\n_defineProperty(FakeMissingTranslationHandler, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FakeMissingTranslationHandler,\n  factory: FakeMissingTranslationHandler.ɵfac\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FakeMissingTranslationHandler, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param o1 Object or value to compare.\n * @param o2 Object or value to compare.\n * @returns true if arguments are equal.\n */\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1,\n    t2 = typeof o2,\n    length,\n    key,\n    keySet;\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n      keySet = Object.create(null);\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n        keySet[key] = true;\n      }\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\n/* tslint:enable */\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\nfunction mergeDeep(target, source) {\n  let output = Object.assign({}, target);\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {\n            [key]: source[key]\n          });\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {\n          [key]: source[key]\n        });\n      }\n    });\n  }\n  return output;\n}\nclass TranslateParser {}\nclass TranslateDefaultParser extends TranslateParser {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"templateMatcher\", /{{\\s?([^{}\\s]*)\\s?}}/g);\n  }\n  interpolate(expr, params) {\n    let result;\n    if (typeof expr === 'string') {\n      result = this.interpolateString(expr, params);\n    } else if (typeof expr === 'function') {\n      result = this.interpolateFunction(expr, params);\n    } else {\n      // this should not happen, but an unrelated TranslateService test depends on it\n      result = expr;\n    }\n    return result;\n  }\n  getValue(target, key) {\n    let keys = typeof key === 'string' ? key.split('.') : [key];\n    key = '';\n    do {\n      key += keys.shift();\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n        target = target[key];\n        key = '';\n      } else if (!keys.length) {\n        target = undefined;\n      } else {\n        key += '.';\n      }\n    } while (keys.length);\n    return target;\n  }\n  interpolateFunction(fn, params) {\n    return fn(params);\n  }\n  interpolateString(expr, params) {\n    if (!params) {\n      return expr;\n    }\n    return expr.replace(this.templateMatcher, (substring, b) => {\n      let r = this.getValue(params, b);\n      return isDefined(r) ? r : substring;\n    });\n  }\n}\n_defineProperty(TranslateDefaultParser, \"\\u0275fac\", /* @__PURE__ */function () {\n  let ɵTranslateDefaultParser_BaseFactory;\n  return function TranslateDefaultParser_Factory(t) {\n    return (ɵTranslateDefaultParser_BaseFactory || (ɵTranslateDefaultParser_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateDefaultParser)))(t || TranslateDefaultParser);\n  };\n}());\n_defineProperty(TranslateDefaultParser, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TranslateDefaultParser,\n  factory: TranslateDefaultParser.ɵfac\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateDefaultParser, [{\n    type: Injectable\n  }], null, null);\n})();\nclass TranslateCompiler {}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nclass TranslateFakeCompiler extends TranslateCompiler {\n  compile(value, lang) {\n    return value;\n  }\n  compileTranslations(translations, lang) {\n    return translations;\n  }\n}\n_defineProperty(TranslateFakeCompiler, \"\\u0275fac\", /* @__PURE__ */function () {\n  let ɵTranslateFakeCompiler_BaseFactory;\n  return function TranslateFakeCompiler_Factory(t) {\n    return (ɵTranslateFakeCompiler_BaseFactory || (ɵTranslateFakeCompiler_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateFakeCompiler)))(t || TranslateFakeCompiler);\n  };\n}());\n_defineProperty(TranslateFakeCompiler, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TranslateFakeCompiler,\n  factory: TranslateFakeCompiler.ɵfac\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateFakeCompiler, [{\n    type: Injectable\n  }], null, null);\n})();\nclass TranslateStore {\n  constructor() {\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    _defineProperty(this, \"defaultLang\", void 0);\n    /**\n     * The lang currently used\n     */\n    _defineProperty(this, \"currentLang\", this.defaultLang);\n    /**\n     * a list of translations per lang\n     */\n    _defineProperty(this, \"translations\", {});\n    /**\n     * an array of langs\n     */\n    _defineProperty(this, \"langs\", []);\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n       *     // do something\n       * });\n     */\n    _defineProperty(this, \"onTranslationChange\", new EventEmitter());\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    _defineProperty(this, \"onLangChange\", new EventEmitter());\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    _defineProperty(this, \"onDefaultLangChange\", new EventEmitter());\n  }\n}\nconst USE_STORE = new InjectionToken('USE_STORE');\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\nclass TranslateService {\n  /**\n   * An EventEmitter to listen to translation change events\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onTranslationChange() {\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n  }\n  /**\n   * An EventEmitter to listen to lang change events\n   * onLangChange.subscribe((params: LangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onLangChange() {\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\n  }\n  /**\n   * An EventEmitter to listen to default lang change events\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n     *     // do something\n     * });\n   */\n  get onDefaultLangChange() {\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n  }\n  /**\n   * The default lang to fallback when translations are missing on the current lang\n   */\n  get defaultLang() {\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\n  }\n  set defaultLang(defaultLang) {\n    if (this.isolate) {\n      this._defaultLang = defaultLang;\n    } else {\n      this.store.defaultLang = defaultLang;\n    }\n  }\n  /**\n   * The lang currently used\n   */\n  get currentLang() {\n    return this.isolate ? this._currentLang : this.store.currentLang;\n  }\n  set currentLang(currentLang) {\n    if (this.isolate) {\n      this._currentLang = currentLang;\n    } else {\n      this.store.currentLang = currentLang;\n    }\n  }\n  /**\n   * an array of langs\n   */\n  get langs() {\n    return this.isolate ? this._langs : this.store.langs;\n  }\n  set langs(langs) {\n    if (this.isolate) {\n      this._langs = langs;\n    } else {\n      this.store.langs = langs;\n    }\n  }\n  /**\n   * a list of translations per lang\n   */\n  get translations() {\n    return this.isolate ? this._translations : this.store.translations;\n  }\n  set translations(translations) {\n    if (this.isolate) {\n      this._translations = translations;\n    } else {\n      this.store.translations = translations;\n    }\n  }\n  /**\n   *\n   * @param store an instance of the store (that is supposed to be unique)\n   * @param currentLoader An instance of the loader currently used\n   * @param compiler An instance of the compiler currently used\n   * @param parser An instance of the parser currently used\n   * @param missingTranslationHandler A handler for missing translations.\n   * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n   * @param isolate whether this service should use the store or not\n   * @param extend To make a child module extend (and use) translations from parent modules.\n   * @param defaultLanguage Set the default language using configuration\n   */\n  constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n    _defineProperty(this, \"store\", void 0);\n    _defineProperty(this, \"currentLoader\", void 0);\n    _defineProperty(this, \"compiler\", void 0);\n    _defineProperty(this, \"parser\", void 0);\n    _defineProperty(this, \"missingTranslationHandler\", void 0);\n    _defineProperty(this, \"useDefaultLang\", void 0);\n    _defineProperty(this, \"isolate\", void 0);\n    _defineProperty(this, \"extend\", void 0);\n    _defineProperty(this, \"loadingTranslations\", void 0);\n    _defineProperty(this, \"pending\", false);\n    _defineProperty(this, \"_onTranslationChange\", new EventEmitter());\n    _defineProperty(this, \"_onLangChange\", new EventEmitter());\n    _defineProperty(this, \"_onDefaultLangChange\", new EventEmitter());\n    _defineProperty(this, \"_defaultLang\", void 0);\n    _defineProperty(this, \"_currentLang\", void 0);\n    _defineProperty(this, \"_langs\", []);\n    _defineProperty(this, \"_translations\", {});\n    _defineProperty(this, \"_translationRequests\", {});\n    this.store = store;\n    this.currentLoader = currentLoader;\n    this.compiler = compiler;\n    this.parser = parser;\n    this.missingTranslationHandler = missingTranslationHandler;\n    this.useDefaultLang = useDefaultLang;\n    this.isolate = isolate;\n    this.extend = extend;\n    /** set the default language from configuration */\n    if (defaultLanguage) {\n      this.setDefaultLang(defaultLanguage);\n    }\n  }\n  /**\n   * Sets the default language to use as a fallback\n   */\n  setDefaultLang(lang) {\n    if (lang === this.defaultLang) {\n      return;\n    }\n    let pending = this.retrieveTranslations(lang);\n    if (typeof pending !== \"undefined\") {\n      // on init set the defaultLang immediately\n      if (this.defaultLang == null) {\n        this.defaultLang = lang;\n      }\n      pending.pipe(take(1)).subscribe(res => {\n        this.changeDefaultLang(lang);\n      });\n    } else {\n      // we already have this language\n      this.changeDefaultLang(lang);\n    }\n  }\n  /**\n   * Gets the default language used\n   */\n  getDefaultLang() {\n    return this.defaultLang;\n  }\n  /**\n   * Changes the lang currently used\n   */\n  use(lang) {\n    // don't change the language if the language given is already selected\n    if (lang === this.currentLang) {\n      return of(this.translations[lang]);\n    }\n    let pending = this.retrieveTranslations(lang);\n    if (typeof pending !== \"undefined\") {\n      // on init set the currentLang immediately\n      if (!this.currentLang) {\n        this.currentLang = lang;\n      }\n      pending.pipe(take(1)).subscribe(res => {\n        this.changeLang(lang);\n      });\n      return pending;\n    } else {\n      // we have this language, return an Observable\n      this.changeLang(lang);\n      return of(this.translations[lang]);\n    }\n  }\n  /**\n   * Retrieves the given translations\n   */\n  retrieveTranslations(lang) {\n    let pending;\n    // if this language is unavailable or extend is true, ask for it\n    if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n      pending = this._translationRequests[lang];\n    }\n    return pending;\n  }\n  /**\n   * Gets an object of translations for a given language with the current loader\n   * and passes it through the compiler\n   */\n  getTranslation(lang) {\n    this.pending = true;\n    const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n    this.loadingTranslations = loadingTranslations.pipe(map(res => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\n    this.loadingTranslations.subscribe({\n      next: res => {\n        this.translations[lang] = this.extend && this.translations[lang] ? {\n          ...res,\n          ...this.translations[lang]\n        } : res;\n        this.updateLangs();\n        this.pending = false;\n      },\n      error: err => {\n        this.pending = false;\n      }\n    });\n    return loadingTranslations;\n  }\n  /**\n   * Manually sets an object of translations for a given language\n   * after passing it through the compiler\n   */\n  setTranslation(lang, translations, shouldMerge = false) {\n    translations = this.compiler.compileTranslations(translations, lang);\n    if ((shouldMerge || this.extend) && this.translations[lang]) {\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\n    } else {\n      this.translations[lang] = translations;\n    }\n    this.updateLangs();\n    this.onTranslationChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\n   * Returns an array of currently available langs\n   */\n  getLangs() {\n    return this.langs;\n  }\n  /**\n   * Add available langs\n   */\n  addLangs(langs) {\n    langs.forEach(lang => {\n      if (this.langs.indexOf(lang) === -1) {\n        this.langs.push(lang);\n      }\n    });\n  }\n  /**\n   * Update the list of available langs\n   */\n  updateLangs() {\n    this.addLangs(Object.keys(this.translations));\n  }\n  /**\n   * Returns the parsed result of the translations\n   */\n  getParsedResult(translations, key, interpolateParams) {\n    let res;\n    if (key instanceof Array) {\n      let result = {},\n        observables = false;\n      for (let k of key) {\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\n        if (isObservable(result[k])) {\n          observables = true;\n        }\n      }\n      if (observables) {\n        const sources = key.map(k => isObservable(result[k]) ? result[k] : of(result[k]));\n        return forkJoin(sources).pipe(map(arr => {\n          let obj = {};\n          arr.forEach((value, index) => {\n            obj[key[index]] = value;\n          });\n          return obj;\n        }));\n      }\n      return result;\n    }\n    if (translations) {\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n    }\n    if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n    }\n    if (typeof res === \"undefined\") {\n      let params = {\n        key,\n        translateService: this\n      };\n      if (typeof interpolateParams !== 'undefined') {\n        params.interpolateParams = interpolateParams;\n      }\n      res = this.missingTranslationHandler.handle(params);\n    }\n    return typeof res !== \"undefined\" ? res : key;\n  }\n  /**\n   * Gets the translated value of a key (or an array of keys)\n   * @returns the translated key, or an object of translated keys\n   */\n  get(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    // check if we are loading a new translation to use\n    if (this.pending) {\n      return this.loadingTranslations.pipe(concatMap(res => {\n        res = this.getParsedResult(res, key, interpolateParams);\n        return isObservable(res) ? res : of(res);\n      }));\n    } else {\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n      return isObservable(res) ? res : of(res);\n    }\n  }\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the translation changes.\n   * @returns A stream of the translated key, or an object of translated keys\n   */\n  getStreamOnTranslationChange(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    return concat(defer(() => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap(event => {\n      const res = this.getParsedResult(event.translations, key, interpolateParams);\n      if (typeof res.subscribe === 'function') {\n        return res;\n      } else {\n        return of(res);\n      }\n    })));\n  }\n  /**\n   * Returns a stream of translated values of a key (or an array of keys) which updates\n   * whenever the language changes.\n   * @returns A stream of the translated key, or an object of translated keys\n   */\n  stream(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    return concat(defer(() => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap(event => {\n      const res = this.getParsedResult(event.translations, key, interpolateParams);\n      return isObservable(res) ? res : of(res);\n    })));\n  }\n  /**\n   * Returns a translation instantly from the internal state of loaded translation.\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n   */\n  instant(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n    if (isObservable(res)) {\n      if (key instanceof Array) {\n        let obj = {};\n        key.forEach((value, index) => {\n          obj[key[index]] = key[index];\n        });\n        return obj;\n      }\n      return key;\n    } else {\n      return res;\n    }\n  }\n  /**\n   * Sets the translated value of a key, after compiling it\n   */\n  set(key, value, lang = this.currentLang) {\n    this.translations[lang][key] = this.compiler.compile(value, lang);\n    this.updateLangs();\n    this.onTranslationChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\n   * Changes the current lang\n   */\n  changeLang(lang) {\n    this.currentLang = lang;\n    this.onLangChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n    // if there is no default lang, use the one that we just set\n    if (this.defaultLang == null) {\n      this.changeDefaultLang(lang);\n    }\n  }\n  /**\n   * Changes the default lang\n   */\n  changeDefaultLang(lang) {\n    this.defaultLang = lang;\n    this.onDefaultLangChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\n   * Allows to reload the lang file from the file\n   */\n  reloadLang(lang) {\n    this.resetLang(lang);\n    return this.getTranslation(lang);\n  }\n  /**\n   * Deletes inner translation\n   */\n  resetLang(lang) {\n    this._translationRequests[lang] = undefined;\n    this.translations[lang] = undefined;\n  }\n  /**\n   * Returns the language code name from the browser, e.g. \"de\"\n   */\n  getBrowserLang() {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n    let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n    if (typeof browserLang === 'undefined') {\n      return undefined;\n    }\n    if (browserLang.indexOf('-') !== -1) {\n      browserLang = browserLang.split('-')[0];\n    }\n    if (browserLang.indexOf('_') !== -1) {\n      browserLang = browserLang.split('_')[0];\n    }\n    return browserLang;\n  }\n  /**\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\n   */\n  getBrowserCultureLang() {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n    let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n    return browserCultureLang;\n  }\n}\n_defineProperty(TranslateService, \"\\u0275fac\", function TranslateService_Factory(t) {\n  return new (t || TranslateService)(i0.ɵɵinject(TranslateStore), i0.ɵɵinject(TranslateLoader), i0.ɵɵinject(TranslateCompiler), i0.ɵɵinject(TranslateParser), i0.ɵɵinject(MissingTranslationHandler), i0.ɵɵinject(USE_DEFAULT_LANG), i0.ɵɵinject(USE_STORE), i0.ɵɵinject(USE_EXTEND), i0.ɵɵinject(DEFAULT_LANGUAGE));\n});\n_defineProperty(TranslateService, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TranslateService,\n  factory: TranslateService.ɵfac\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: TranslateStore\n    }, {\n      type: TranslateLoader\n    }, {\n      type: TranslateCompiler\n    }, {\n      type: TranslateParser\n    }, {\n      type: MissingTranslationHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [USE_DEFAULT_LANG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [USE_STORE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [USE_EXTEND]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DEFAULT_LANGUAGE]\n      }]\n    }];\n  }, null);\n})();\nclass TranslateDirective {\n  set translate(key) {\n    if (key) {\n      this.key = key;\n      this.checkNodes();\n    }\n  }\n  set translateParams(params) {\n    if (!equals(this.currentParams, params)) {\n      this.currentParams = params;\n      this.checkNodes(true);\n    }\n  }\n  constructor(translateService, element, _ref) {\n    _defineProperty(this, \"translateService\", void 0);\n    _defineProperty(this, \"element\", void 0);\n    _defineProperty(this, \"_ref\", void 0);\n    _defineProperty(this, \"key\", void 0);\n    _defineProperty(this, \"lastParams\", void 0);\n    _defineProperty(this, \"currentParams\", void 0);\n    _defineProperty(this, \"onLangChangeSub\", void 0);\n    _defineProperty(this, \"onDefaultLangChangeSub\", void 0);\n    _defineProperty(this, \"onTranslationChangeSub\", void 0);\n    this.translateService = translateService;\n    this.element = element;\n    this._ref = _ref;\n    // subscribe to onTranslationChange event, in case the translations of the current lang change\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(event => {\n        if (event.lang === this.translateService.currentLang) {\n          this.checkNodes(true, event.translations);\n        }\n      });\n    }\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe(event => {\n        this.checkNodes(true, event.translations);\n      });\n    }\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(event => {\n        this.checkNodes(true);\n      });\n    }\n  }\n  ngAfterViewChecked() {\n    this.checkNodes();\n  }\n  checkNodes(forceUpdate = false, translations) {\n    let nodes = this.element.nativeElement.childNodes;\n    // if the element is empty\n    if (!nodes.length) {\n      // we add the key as content\n      this.setContent(this.element.nativeElement, this.key);\n      nodes = this.element.nativeElement.childNodes;\n    }\n    for (let i = 0; i < nodes.length; ++i) {\n      let node = nodes[i];\n      if (node.nodeType === 3) {\n        // node type 3 is a text node\n        let key;\n        if (forceUpdate) {\n          node.lastKey = null;\n        }\n        if (isDefined(node.lookupKey)) {\n          key = node.lookupKey;\n        } else if (this.key) {\n          key = this.key;\n        } else {\n          let content = this.getContent(node);\n          let trimmedContent = content.trim();\n          if (trimmedContent.length) {\n            node.lookupKey = trimmedContent;\n            // we want to use the content as a key, not the translation value\n            if (content !== node.currentValue) {\n              key = trimmedContent;\n              // the content was changed from the user, we'll use it as a reference if needed\n              node.originalContent = content || node.originalContent;\n            } else if (node.originalContent) {\n              // the content seems ok, but the lang has changed\n              // the current content is the translation, not the key, use the last real content as key\n              key = node.originalContent.trim();\n            } else if (content !== node.currentValue) {\n              // we want to use the content as a key, not the translation value\n              key = trimmedContent;\n              // the content was changed from the user, we'll use it as a reference if needed\n              node.originalContent = content || node.originalContent;\n            }\n          }\n        }\n        this.updateValue(key, node, translations);\n      }\n    }\n  }\n  updateValue(key, node, translations) {\n    if (key) {\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\n        return;\n      }\n      this.lastParams = this.currentParams;\n      let onTranslation = res => {\n        if (res !== key) {\n          node.lastKey = key;\n        }\n        if (!node.originalContent) {\n          node.originalContent = this.getContent(node);\n        }\n        node.currentValue = isDefined(res) ? res : node.originalContent || key;\n        // we replace in the original content to preserve spaces that we might have trimmed\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n        this._ref.markForCheck();\n      };\n      if (isDefined(translations)) {\n        let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n        if (isObservable(res)) {\n          res.subscribe({\n            next: onTranslation\n          });\n        } else {\n          onTranslation(res);\n        }\n      } else {\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n      }\n    }\n  }\n  getContent(node) {\n    return isDefined(node.textContent) ? node.textContent : node.data;\n  }\n  setContent(node, content) {\n    if (isDefined(node.textContent)) {\n      node.textContent = content;\n    } else {\n      node.data = content;\n    }\n  }\n  ngOnDestroy() {\n    if (this.onLangChangeSub) {\n      this.onLangChangeSub.unsubscribe();\n    }\n    if (this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub.unsubscribe();\n    }\n    if (this.onTranslationChangeSub) {\n      this.onTranslationChangeSub.unsubscribe();\n    }\n  }\n}\n_defineProperty(TranslateDirective, \"\\u0275fac\", function TranslateDirective_Factory(t) {\n  return new (t || TranslateDirective)(i0.ɵɵdirectiveInject(TranslateService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n});\n_defineProperty(TranslateDirective, \"\\u0275dir\", /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TranslateDirective,\n  selectors: [[\"\", \"translate\", \"\"], [\"\", \"ngx-translate\", \"\"]],\n  inputs: {\n    translate: \"translate\",\n    translateParams: \"translateParams\"\n  }\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[translate],[ngx-translate]'\n    }]\n  }], function () {\n    return [{\n      type: TranslateService\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    translate: [{\n      type: Input\n    }],\n    translateParams: [{\n      type: Input\n    }]\n  });\n})();\nclass TranslatePipe {\n  constructor(translate, _ref) {\n    _defineProperty(this, \"translate\", void 0);\n    _defineProperty(this, \"_ref\", void 0);\n    _defineProperty(this, \"value\", '');\n    _defineProperty(this, \"lastKey\", null);\n    _defineProperty(this, \"lastParams\", []);\n    _defineProperty(this, \"onTranslationChange\", void 0);\n    _defineProperty(this, \"onLangChange\", void 0);\n    _defineProperty(this, \"onDefaultLangChange\", void 0);\n    this.translate = translate;\n    this._ref = _ref;\n  }\n  updateValue(key, interpolateParams, translations) {\n    let onTranslation = res => {\n      this.value = res !== undefined ? res : key;\n      this.lastKey = key;\n      this._ref.markForCheck();\n    };\n    if (translations) {\n      let res = this.translate.getParsedResult(translations, key, interpolateParams);\n      if (isObservable(res.subscribe)) {\n        res.subscribe(onTranslation);\n      } else {\n        onTranslation(res);\n      }\n    }\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\n  }\n  transform(query, ...args) {\n    if (!query || !query.length) {\n      return query;\n    }\n    // if we ask another time for the same key, return the last value\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n      return this.value;\n    }\n    let interpolateParams = undefined;\n    if (isDefined(args[0]) && args.length) {\n      if (typeof args[0] === 'string' && args[0].length) {\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n        let validArgs = args[0].replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":').replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n        try {\n          interpolateParams = JSON.parse(validArgs);\n        } catch (e) {\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n        }\n      } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n        interpolateParams = args[0];\n      }\n    }\n    // store the query, in case it changes\n    this.lastKey = query;\n    // store the params, in case they change\n    this.lastParams = args;\n    // set the value\n    this.updateValue(query, interpolateParams);\n    // if there is a subscription to onLangChange, clean it\n    this._dispose();\n    // subscribe to onTranslationChange event, in case the translations change\n    if (!this.onTranslationChange) {\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe(event => {\n        if (this.lastKey && event.lang === this.translate.currentLang) {\n          this.lastKey = null;\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChange) {\n      this.onLangChange = this.translate.onLangChange.subscribe(event => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChange) {\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams);\n        }\n      });\n    }\n    return this.value;\n  }\n  /**\n   * Clean any existing subscription to change events\n   */\n  _dispose() {\n    if (typeof this.onTranslationChange !== 'undefined') {\n      this.onTranslationChange.unsubscribe();\n      this.onTranslationChange = undefined;\n    }\n    if (typeof this.onLangChange !== 'undefined') {\n      this.onLangChange.unsubscribe();\n      this.onLangChange = undefined;\n    }\n    if (typeof this.onDefaultLangChange !== 'undefined') {\n      this.onDefaultLangChange.unsubscribe();\n      this.onDefaultLangChange = undefined;\n    }\n  }\n  ngOnDestroy() {\n    this._dispose();\n  }\n}\n_defineProperty(TranslatePipe, \"\\u0275fac\", function TranslatePipe_Factory(t) {\n  return new (t || TranslatePipe)(i0.ɵɵdirectiveInject(TranslateService, 16), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16));\n});\n_defineProperty(TranslatePipe, \"\\u0275pipe\", /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"translate\",\n  type: TranslatePipe,\n  pure: false\n}));\n_defineProperty(TranslatePipe, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TranslatePipe,\n  factory: TranslatePipe.ɵfac\n}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslatePipe, [{\n    type: Injectable\n  }, {\n    type: Pipe,\n    args: [{\n      name: 'translate',\n      pure: false // required to update the value when the promise is resolved\n    }]\n  }], function () {\n    return [{\n      type: TranslateService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, null);\n})();\nclass TranslateModule {\n  /**\n   * Use this method in your root module to provide the TranslateService\n   */\n  static forRoot(config = {}) {\n    return {\n      ngModule: TranslateModule,\n      providers: [config.loader || {\n        provide: TranslateLoader,\n        useClass: TranslateFakeLoader\n      }, config.compiler || {\n        provide: TranslateCompiler,\n        useClass: TranslateFakeCompiler\n      }, config.parser || {\n        provide: TranslateParser,\n        useClass: TranslateDefaultParser\n      }, config.missingTranslationHandler || {\n        provide: MissingTranslationHandler,\n        useClass: FakeMissingTranslationHandler\n      }, TranslateStore, {\n        provide: USE_STORE,\n        useValue: config.isolate\n      }, {\n        provide: USE_DEFAULT_LANG,\n        useValue: config.useDefaultLang\n      }, {\n        provide: USE_EXTEND,\n        useValue: config.extend\n      }, {\n        provide: DEFAULT_LANGUAGE,\n        useValue: config.defaultLanguage\n      }, TranslateService]\n    };\n  }\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(config = {}) {\n    return {\n      ngModule: TranslateModule,\n      providers: [config.loader || {\n        provide: TranslateLoader,\n        useClass: TranslateFakeLoader\n      }, config.compiler || {\n        provide: TranslateCompiler,\n        useClass: TranslateFakeCompiler\n      }, config.parser || {\n        provide: TranslateParser,\n        useClass: TranslateDefaultParser\n      }, config.missingTranslationHandler || {\n        provide: MissingTranslationHandler,\n        useClass: FakeMissingTranslationHandler\n      }, {\n        provide: USE_STORE,\n        useValue: config.isolate\n      }, {\n        provide: USE_DEFAULT_LANG,\n        useValue: config.useDefaultLang\n      }, {\n        provide: USE_EXTEND,\n        useValue: config.extend\n      }, {\n        provide: DEFAULT_LANGUAGE,\n        useValue: config.defaultLanguage\n      }, TranslateService]\n    };\n  }\n}\n_defineProperty(TranslateModule, \"\\u0275fac\", function TranslateModule_Factory(t) {\n  return new (t || TranslateModule)();\n});\n_defineProperty(TranslateModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TranslateModule\n}));\n_defineProperty(TranslateModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({}));\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TranslatePipe, TranslateDirective],\n      exports: [TranslatePipe, TranslateDirective]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };","map":{"version":3,"names":["i0","Injectable","EventEmitter","InjectionToken","Inject","Directive","Input","Pipe","NgModule","of","isObservable","forkJoin","concat","defer","take","shareReplay","map","concatMap","switchMap","TranslateLoader","TranslateFakeLoader","getTranslation","lang","_defineProperty","ɵTranslateFakeLoader_BaseFactory","TranslateFakeLoader_Factory","t","ɵɵgetInheritedFactory","ɵɵdefineInjectable","token","factory","ɵfac","ngDevMode","ɵsetClassMetadata","type","MissingTranslationHandler","FakeMissingTranslationHandler","handle","params","key","FakeMissingTranslationHandler_Factory","equals","o1","o2","t1","t2","length","keySet","Array","isArray","Object","create","isDefined","value","isObject","item","mergeDeep","target","source","output","assign","keys","forEach","TranslateParser","TranslateDefaultParser","constructor","args","interpolate","expr","result","interpolateString","interpolateFunction","getValue","split","shift","undefined","fn","replace","templateMatcher","substring","b","r","ɵTranslateDefaultParser_BaseFactory","TranslateDefaultParser_Factory","TranslateCompiler","TranslateFakeCompiler","compile","compileTranslations","translations","ɵTranslateFakeCompiler_BaseFactory","TranslateFakeCompiler_Factory","TranslateStore","defaultLang","USE_STORE","USE_DEFAULT_LANG","DEFAULT_LANGUAGE","USE_EXTEND","TranslateService","onTranslationChange","isolate","_onTranslationChange","store","onLangChange","_onLangChange","onDefaultLangChange","_onDefaultLangChange","_defaultLang","currentLang","_currentLang","langs","_langs","_translations","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","extend","defaultLanguage","setDefaultLang","pending","retrieveTranslations","pipe","subscribe","res","changeDefaultLang","getDefaultLang","use","changeLang","_translationRequests","loadingTranslations","next","updateLangs","error","err","setTranslation","shouldMerge","emit","getLangs","addLangs","indexOf","push","getParsedResult","interpolateParams","observables","k","sources","arr","obj","index","translateService","get","Error","getStreamOnTranslationChange","event","stream","instant","set","reloadLang","resetLang","getBrowserLang","window","navigator","browserLang","languages","language","browserLanguage","userLanguage","getBrowserCultureLang","browserCultureLang","TranslateService_Factory","ɵɵinject","decorators","TranslateDirective","translate","checkNodes","translateParams","currentParams","element","_ref","onTranslationChangeSub","onLangChangeSub","onDefaultLangChangeSub","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","i","node","nodeType","lastKey","lookupKey","content","getContent","trimmedContent","trim","currentValue","originalContent","updateValue","lastParams","onTranslation","markForCheck","textContent","data","ngOnDestroy","unsubscribe","TranslateDirective_Factory","ɵɵdirectiveInject","ElementRef","ChangeDetectorRef","ɵɵdefineDirective","selectors","inputs","selector","TranslatePipe","transform","query","validArgs","JSON","parse","e","SyntaxError","_dispose","TranslatePipe_Factory","ɵɵdefinePipe","name","pure","TranslateModule","forRoot","config","ngModule","providers","loader","provide","useClass","useValue","forChild","TranslateModule_Factory","ɵɵdefineNgModule","ɵɵdefineInjector","declarations","exports"],"sources":["C:/Alfaro/App/Angular/_angular-project/angular-internationalization/node_modules/@ngx-translate/core/dist/fesm2022/ngx-translate-core.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, Inject, Directive, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n\nclass TranslateLoader {\n}\n/**\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\n */\nclass TranslateFakeLoader extends TranslateLoader {\n    getTranslation(lang) {\n        return of({});\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateFakeLoader, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateFakeLoader });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateFakeLoader, decorators: [{\n            type: Injectable\n        }] });\n\nclass MissingTranslationHandler {\n}\n/**\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\n */\nclass FakeMissingTranslationHandler {\n    handle(params) {\n        return params.key;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FakeMissingTranslationHandler, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FakeMissingTranslationHandler });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: FakeMissingTranslationHandler, decorators: [{\n            type: Injectable\n        }] });\n\n/* tslint:disable */\n/**\n * Determines if two objects or two values are equivalent.\n *\n * Two objects or values are considered equivalent if at least one of the following is true:\n *\n * * Both objects or values pass `===` comparison.\n * * Both objects or values are of the same type and all of their properties are equal by\n *   comparing them with `equals`.\n *\n * @param o1 Object or value to compare.\n * @param o2 Object or value to compare.\n * @returns true if arguments are equal.\n */\nfunction equals(o1, o2) {\n    if (o1 === o2)\n        return true;\n    if (o1 === null || o2 === null)\n        return false;\n    if (o1 !== o1 && o2 !== o2)\n        return true; // NaN === NaN\n    let t1 = typeof o1, t2 = typeof o2, length, key, keySet;\n    if (t1 == t2 && t1 == 'object') {\n        if (Array.isArray(o1)) {\n            if (!Array.isArray(o2))\n                return false;\n            if ((length = o1.length) == o2.length) {\n                for (key = 0; key < length; key++) {\n                    if (!equals(o1[key], o2[key]))\n                        return false;\n                }\n                return true;\n            }\n        }\n        else {\n            if (Array.isArray(o2)) {\n                return false;\n            }\n            keySet = Object.create(null);\n            for (key in o1) {\n                if (!equals(o1[key], o2[key])) {\n                    return false;\n                }\n                keySet[key] = true;\n            }\n            for (key in o2) {\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}\n/* tslint:enable */\nfunction isDefined(value) {\n    return typeof value !== 'undefined' && value !== null;\n}\nfunction isObject(item) {\n    return (item && typeof item === 'object' && !Array.isArray(item));\n}\nfunction mergeDeep(target, source) {\n    let output = Object.assign({}, target);\n    if (isObject(target) && isObject(source)) {\n        Object.keys(source).forEach((key) => {\n            if (isObject(source[key])) {\n                if (!(key in target)) {\n                    Object.assign(output, { [key]: source[key] });\n                }\n                else {\n                    output[key] = mergeDeep(target[key], source[key]);\n                }\n            }\n            else {\n                Object.assign(output, { [key]: source[key] });\n            }\n        });\n    }\n    return output;\n}\n\nclass TranslateParser {\n}\nclass TranslateDefaultParser extends TranslateParser {\n    templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n    interpolate(expr, params) {\n        let result;\n        if (typeof expr === 'string') {\n            result = this.interpolateString(expr, params);\n        }\n        else if (typeof expr === 'function') {\n            result = this.interpolateFunction(expr, params);\n        }\n        else {\n            // this should not happen, but an unrelated TranslateService test depends on it\n            result = expr;\n        }\n        return result;\n    }\n    getValue(target, key) {\n        let keys = typeof key === 'string' ? key.split('.') : [key];\n        key = '';\n        do {\n            key += keys.shift();\n            if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n                target = target[key];\n                key = '';\n            }\n            else if (!keys.length) {\n                target = undefined;\n            }\n            else {\n                key += '.';\n            }\n        } while (keys.length);\n        return target;\n    }\n    interpolateFunction(fn, params) {\n        return fn(params);\n    }\n    interpolateString(expr, params) {\n        if (!params) {\n            return expr;\n        }\n        return expr.replace(this.templateMatcher, (substring, b) => {\n            let r = this.getValue(params, b);\n            return isDefined(r) ? r : substring;\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateDefaultParser, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateDefaultParser });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateDefaultParser, decorators: [{\n            type: Injectable\n        }] });\n\nclass TranslateCompiler {\n}\n/**\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\n */\nclass TranslateFakeCompiler extends TranslateCompiler {\n    compile(value, lang) {\n        return value;\n    }\n    compileTranslations(translations, lang) {\n        return translations;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateFakeCompiler, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateFakeCompiler });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateFakeCompiler, decorators: [{\n            type: Injectable\n        }] });\n\nclass TranslateStore {\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    defaultLang;\n    /**\n     * The lang currently used\n     */\n    currentLang = this.defaultLang;\n    /**\n     * a list of translations per lang\n     */\n    translations = {};\n    /**\n     * an array of langs\n     */\n    langs = [];\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n       *     // do something\n       * });\n     */\n    onTranslationChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    onLangChange = new EventEmitter();\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    onDefaultLangChange = new EventEmitter();\n}\n\nconst USE_STORE = new InjectionToken('USE_STORE');\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\nclass TranslateService {\n    store;\n    currentLoader;\n    compiler;\n    parser;\n    missingTranslationHandler;\n    useDefaultLang;\n    isolate;\n    extend;\n    loadingTranslations;\n    pending = false;\n    _onTranslationChange = new EventEmitter();\n    _onLangChange = new EventEmitter();\n    _onDefaultLangChange = new EventEmitter();\n    _defaultLang;\n    _currentLang;\n    _langs = [];\n    _translations = {};\n    _translationRequests = {};\n    /**\n     * An EventEmitter to listen to translation change events\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onTranslationChange() {\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n    }\n    /**\n     * An EventEmitter to listen to lang change events\n     * onLangChange.subscribe((params: LangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onLangChange() {\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\n    }\n    /**\n     * An EventEmitter to listen to default lang change events\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\n       *     // do something\n       * });\n     */\n    get onDefaultLangChange() {\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n    }\n    /**\n     * The default lang to fallback when translations are missing on the current lang\n     */\n    get defaultLang() {\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\n    }\n    set defaultLang(defaultLang) {\n        if (this.isolate) {\n            this._defaultLang = defaultLang;\n        }\n        else {\n            this.store.defaultLang = defaultLang;\n        }\n    }\n    /**\n     * The lang currently used\n     */\n    get currentLang() {\n        return this.isolate ? this._currentLang : this.store.currentLang;\n    }\n    set currentLang(currentLang) {\n        if (this.isolate) {\n            this._currentLang = currentLang;\n        }\n        else {\n            this.store.currentLang = currentLang;\n        }\n    }\n    /**\n     * an array of langs\n     */\n    get langs() {\n        return this.isolate ? this._langs : this.store.langs;\n    }\n    set langs(langs) {\n        if (this.isolate) {\n            this._langs = langs;\n        }\n        else {\n            this.store.langs = langs;\n        }\n    }\n    /**\n     * a list of translations per lang\n     */\n    get translations() {\n        return this.isolate ? this._translations : this.store.translations;\n    }\n    set translations(translations) {\n        if (this.isolate) {\n            this._translations = translations;\n        }\n        else {\n            this.store.translations = translations;\n        }\n    }\n    /**\n     *\n     * @param store an instance of the store (that is supposed to be unique)\n     * @param currentLoader An instance of the loader currently used\n     * @param compiler An instance of the compiler currently used\n     * @param parser An instance of the parser currently used\n     * @param missingTranslationHandler A handler for missing translations.\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\n     * @param isolate whether this service should use the store or not\n     * @param extend To make a child module extend (and use) translations from parent modules.\n     * @param defaultLanguage Set the default language using configuration\n     */\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n        this.store = store;\n        this.currentLoader = currentLoader;\n        this.compiler = compiler;\n        this.parser = parser;\n        this.missingTranslationHandler = missingTranslationHandler;\n        this.useDefaultLang = useDefaultLang;\n        this.isolate = isolate;\n        this.extend = extend;\n        /** set the default language from configuration */\n        if (defaultLanguage) {\n            this.setDefaultLang(defaultLanguage);\n        }\n    }\n    /**\n     * Sets the default language to use as a fallback\n     */\n    setDefaultLang(lang) {\n        if (lang === this.defaultLang) {\n            return;\n        }\n        let pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the defaultLang immediately\n            if (this.defaultLang == null) {\n                this.defaultLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe((res) => {\n                this.changeDefaultLang(lang);\n            });\n        }\n        else { // we already have this language\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Gets the default language used\n     */\n    getDefaultLang() {\n        return this.defaultLang;\n    }\n    /**\n     * Changes the lang currently used\n     */\n    use(lang) {\n        // don't change the language if the language given is already selected\n        if (lang === this.currentLang) {\n            return of(this.translations[lang]);\n        }\n        let pending = this.retrieveTranslations(lang);\n        if (typeof pending !== \"undefined\") {\n            // on init set the currentLang immediately\n            if (!this.currentLang) {\n                this.currentLang = lang;\n            }\n            pending.pipe(take(1))\n                .subscribe((res) => {\n                this.changeLang(lang);\n            });\n            return pending;\n        }\n        else { // we have this language, return an Observable\n            this.changeLang(lang);\n            return of(this.translations[lang]);\n        }\n    }\n    /**\n     * Retrieves the given translations\n     */\n    retrieveTranslations(lang) {\n        let pending;\n        // if this language is unavailable or extend is true, ask for it\n        if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n            pending = this._translationRequests[lang];\n        }\n        return pending;\n    }\n    /**\n     * Gets an object of translations for a given language with the current loader\n     * and passes it through the compiler\n     */\n    getTranslation(lang) {\n        this.pending = true;\n        const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n        this.loadingTranslations = loadingTranslations.pipe(map((res) => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\n        this.loadingTranslations\n            .subscribe({\n            next: (res) => {\n                this.translations[lang] = this.extend && this.translations[lang] ? { ...res, ...this.translations[lang] } : res;\n                this.updateLangs();\n                this.pending = false;\n            },\n            error: (err) => {\n                this.pending = false;\n            }\n        });\n        return loadingTranslations;\n    }\n    /**\n     * Manually sets an object of translations for a given language\n     * after passing it through the compiler\n     */\n    setTranslation(lang, translations, shouldMerge = false) {\n        translations = this.compiler.compileTranslations(translations, lang);\n        if ((shouldMerge || this.extend) && this.translations[lang]) {\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\n        }\n        else {\n            this.translations[lang] = translations;\n        }\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Returns an array of currently available langs\n     */\n    getLangs() {\n        return this.langs;\n    }\n    /**\n     * Add available langs\n     */\n    addLangs(langs) {\n        langs.forEach((lang) => {\n            if (this.langs.indexOf(lang) === -1) {\n                this.langs.push(lang);\n            }\n        });\n    }\n    /**\n     * Update the list of available langs\n     */\n    updateLangs() {\n        this.addLangs(Object.keys(this.translations));\n    }\n    /**\n     * Returns the parsed result of the translations\n     */\n    getParsedResult(translations, key, interpolateParams) {\n        let res;\n        if (key instanceof Array) {\n            let result = {}, observables = false;\n            for (let k of key) {\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\n                if (isObservable(result[k])) {\n                    observables = true;\n                }\n            }\n            if (observables) {\n                const sources = key.map(k => isObservable(result[k]) ? result[k] : of(result[k]));\n                return forkJoin(sources).pipe(map((arr) => {\n                    let obj = {};\n                    arr.forEach((value, index) => {\n                        obj[key[index]] = value;\n                    });\n                    return obj;\n                }));\n            }\n            return result;\n        }\n        if (translations) {\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n        }\n        if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n        }\n        if (typeof res === \"undefined\") {\n            let params = { key, translateService: this };\n            if (typeof interpolateParams !== 'undefined') {\n                params.interpolateParams = interpolateParams;\n            }\n            res = this.missingTranslationHandler.handle(params);\n        }\n        return typeof res !== \"undefined\" ? res : key;\n    }\n    /**\n     * Gets the translated value of a key (or an array of keys)\n     * @returns the translated key, or an object of translated keys\n     */\n    get(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        // check if we are loading a new translation to use\n        if (this.pending) {\n            return this.loadingTranslations.pipe(concatMap((res) => {\n                res = this.getParsedResult(res, key, interpolateParams);\n                return isObservable(res) ? res : of(res);\n            }));\n        }\n        else {\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n            return isObservable(res) ? res : of(res);\n        }\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the translation changes.\n     * @returns A stream of the translated key, or an object of translated keys\n     */\n    getStreamOnTranslationChange(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        return concat(defer(() => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap((event) => {\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            if (typeof res.subscribe === 'function') {\n                return res;\n            }\n            else {\n                return of(res);\n            }\n        })));\n    }\n    /**\n     * Returns a stream of translated values of a key (or an array of keys) which updates\n     * whenever the language changes.\n     * @returns A stream of the translated key, or an object of translated keys\n     */\n    stream(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        return concat(defer(() => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap((event) => {\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\n            return isObservable(res) ? res : of(res);\n        })));\n    }\n    /**\n     * Returns a translation instantly from the internal state of loaded translation.\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\n     */\n    instant(key, interpolateParams) {\n        if (!isDefined(key) || !key.length) {\n            throw new Error(`Parameter \"key\" required`);\n        }\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n        if (isObservable(res)) {\n            if (key instanceof Array) {\n                let obj = {};\n                key.forEach((value, index) => {\n                    obj[key[index]] = key[index];\n                });\n                return obj;\n            }\n            return key;\n        }\n        else {\n            return res;\n        }\n    }\n    /**\n     * Sets the translated value of a key, after compiling it\n     */\n    set(key, value, lang = this.currentLang) {\n        this.translations[lang][key] = this.compiler.compile(value, lang);\n        this.updateLangs();\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Changes the current lang\n     */\n    changeLang(lang) {\n        this.currentLang = lang;\n        this.onLangChange.emit({ lang: lang, translations: this.translations[lang] });\n        // if there is no default lang, use the one that we just set\n        if (this.defaultLang == null) {\n            this.changeDefaultLang(lang);\n        }\n    }\n    /**\n     * Changes the default lang\n     */\n    changeDefaultLang(lang) {\n        this.defaultLang = lang;\n        this.onDefaultLangChange.emit({ lang: lang, translations: this.translations[lang] });\n    }\n    /**\n     * Allows to reload the lang file from the file\n     */\n    reloadLang(lang) {\n        this.resetLang(lang);\n        return this.getTranslation(lang);\n    }\n    /**\n     * Deletes inner translation\n     */\n    resetLang(lang) {\n        this._translationRequests[lang] = undefined;\n        this.translations[lang] = undefined;\n    }\n    /**\n     * Returns the language code name from the browser, e.g. \"de\"\n     */\n    getBrowserLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        if (typeof browserLang === 'undefined') {\n            return undefined;\n        }\n        if (browserLang.indexOf('-') !== -1) {\n            browserLang = browserLang.split('-')[0];\n        }\n        if (browserLang.indexOf('_') !== -1) {\n            browserLang = browserLang.split('_')[0];\n        }\n        return browserLang;\n    }\n    /**\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\n     */\n    getBrowserCultureLang() {\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n            return undefined;\n        }\n        let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n        return browserCultureLang;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateService, deps: [{ token: TranslateStore }, { token: TranslateLoader }, { token: TranslateCompiler }, { token: TranslateParser }, { token: MissingTranslationHandler }, { token: USE_DEFAULT_LANG }, { token: USE_STORE }, { token: USE_EXTEND }, { token: DEFAULT_LANGUAGE }], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateService });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: TranslateStore }, { type: TranslateLoader }, { type: TranslateCompiler }, { type: TranslateParser }, { type: MissingTranslationHandler }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [USE_DEFAULT_LANG]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [USE_STORE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [USE_EXTEND]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DEFAULT_LANGUAGE]\n                }] }]; } });\n\nclass TranslateDirective {\n    translateService;\n    element;\n    _ref;\n    key;\n    lastParams;\n    currentParams;\n    onLangChangeSub;\n    onDefaultLangChangeSub;\n    onTranslationChangeSub;\n    set translate(key) {\n        if (key) {\n            this.key = key;\n            this.checkNodes();\n        }\n    }\n    set translateParams(params) {\n        if (!equals(this.currentParams, params)) {\n            this.currentParams = params;\n            this.checkNodes(true);\n        }\n    }\n    constructor(translateService, element, _ref) {\n        this.translateService = translateService;\n        this.element = element;\n        this._ref = _ref;\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\n        if (!this.onTranslationChangeSub) {\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event) => {\n                if (event.lang === this.translateService.currentLang) {\n                    this.checkNodes(true, event.translations);\n                }\n            });\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChangeSub) {\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((event) => {\n                this.checkNodes(true, event.translations);\n            });\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event) => {\n                this.checkNodes(true);\n            });\n        }\n    }\n    ngAfterViewChecked() {\n        this.checkNodes();\n    }\n    checkNodes(forceUpdate = false, translations) {\n        let nodes = this.element.nativeElement.childNodes;\n        // if the element is empty\n        if (!nodes.length) {\n            // we add the key as content\n            this.setContent(this.element.nativeElement, this.key);\n            nodes = this.element.nativeElement.childNodes;\n        }\n        for (let i = 0; i < nodes.length; ++i) {\n            let node = nodes[i];\n            if (node.nodeType === 3) { // node type 3 is a text node\n                let key;\n                if (forceUpdate) {\n                    node.lastKey = null;\n                }\n                if (isDefined(node.lookupKey)) {\n                    key = node.lookupKey;\n                }\n                else if (this.key) {\n                    key = this.key;\n                }\n                else {\n                    let content = this.getContent(node);\n                    let trimmedContent = content.trim();\n                    if (trimmedContent.length) {\n                        node.lookupKey = trimmedContent;\n                        // we want to use the content as a key, not the translation value\n                        if (content !== node.currentValue) {\n                            key = trimmedContent;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = content || node.originalContent;\n                        }\n                        else if (node.originalContent) { // the content seems ok, but the lang has changed\n                            // the current content is the translation, not the key, use the last real content as key\n                            key = node.originalContent.trim();\n                        }\n                        else if (content !== node.currentValue) {\n                            // we want to use the content as a key, not the translation value\n                            key = trimmedContent;\n                            // the content was changed from the user, we'll use it as a reference if needed\n                            node.originalContent = content || node.originalContent;\n                        }\n                    }\n                }\n                this.updateValue(key, node, translations);\n            }\n        }\n    }\n    updateValue(key, node, translations) {\n        if (key) {\n            if (node.lastKey === key && this.lastParams === this.currentParams) {\n                return;\n            }\n            this.lastParams = this.currentParams;\n            let onTranslation = (res) => {\n                if (res !== key) {\n                    node.lastKey = key;\n                }\n                if (!node.originalContent) {\n                    node.originalContent = this.getContent(node);\n                }\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\n                // we replace in the original content to preserve spaces that we might have trimmed\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n                this._ref.markForCheck();\n            };\n            if (isDefined(translations)) {\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n                if (isObservable(res)) {\n                    res.subscribe({ next: onTranslation });\n                }\n                else {\n                    onTranslation(res);\n                }\n            }\n            else {\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n            }\n        }\n    }\n    getContent(node) {\n        return isDefined(node.textContent) ? node.textContent : node.data;\n    }\n    setContent(node, content) {\n        if (isDefined(node.textContent)) {\n            node.textContent = content;\n        }\n        else {\n            node.data = content;\n        }\n    }\n    ngOnDestroy() {\n        if (this.onLangChangeSub) {\n            this.onLangChangeSub.unsubscribe();\n        }\n        if (this.onDefaultLangChangeSub) {\n            this.onDefaultLangChangeSub.unsubscribe();\n        }\n        if (this.onTranslationChangeSub) {\n            this.onTranslationChangeSub.unsubscribe();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateDirective, deps: [{ token: TranslateService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.0.0\", type: TranslateDirective, selector: \"[translate],[ngx-translate]\", inputs: { translate: \"translate\", translateParams: \"translateParams\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[translate],[ngx-translate]'\n                }]\n        }], ctorParameters: function () { return [{ type: TranslateService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { translate: [{\n                type: Input\n            }], translateParams: [{\n                type: Input\n            }] } });\n\nclass TranslatePipe {\n    translate;\n    _ref;\n    value = '';\n    lastKey = null;\n    lastParams = [];\n    onTranslationChange;\n    onLangChange;\n    onDefaultLangChange;\n    constructor(translate, _ref) {\n        this.translate = translate;\n        this._ref = _ref;\n    }\n    updateValue(key, interpolateParams, translations) {\n        let onTranslation = (res) => {\n            this.value = res !== undefined ? res : key;\n            this.lastKey = key;\n            this._ref.markForCheck();\n        };\n        if (translations) {\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\n            if (isObservable(res.subscribe)) {\n                res.subscribe(onTranslation);\n            }\n            else {\n                onTranslation(res);\n            }\n        }\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\n    }\n    transform(query, ...args) {\n        if (!query || !query.length) {\n            return query;\n        }\n        // if we ask another time for the same key, return the last value\n        if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n            return this.value;\n        }\n        let interpolateParams = undefined;\n        if (isDefined(args[0]) && args.length) {\n            if (typeof args[0] === 'string' && args[0].length) {\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n                let validArgs = args[0]\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n                try {\n                    interpolateParams = JSON.parse(validArgs);\n                }\n                catch (e) {\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n                }\n            }\n            else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n                interpolateParams = args[0];\n            }\n        }\n        // store the query, in case it changes\n        this.lastKey = query;\n        // store the params, in case they change\n        this.lastParams = args;\n        // set the value\n        this.updateValue(query, interpolateParams);\n        // if there is a subscription to onLangChange, clean it\n        this._dispose();\n        // subscribe to onTranslationChange event, in case the translations change\n        if (!this.onTranslationChange) {\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event) => {\n                if (this.lastKey && event.lang === this.translate.currentLang) {\n                    this.lastKey = null;\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n        // subscribe to onLangChange event, in case the language changes\n        if (!this.onLangChange) {\n            this.onLangChange = this.translate.onLangChange.subscribe((event) => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams, event.translations);\n                }\n            });\n        }\n        // subscribe to onDefaultLangChange event, in case the default language changes\n        if (!this.onDefaultLangChange) {\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n                if (this.lastKey) {\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n                    this.updateValue(query, interpolateParams);\n                }\n            });\n        }\n        return this.value;\n    }\n    /**\n     * Clean any existing subscription to change events\n     */\n    _dispose() {\n        if (typeof this.onTranslationChange !== 'undefined') {\n            this.onTranslationChange.unsubscribe();\n            this.onTranslationChange = undefined;\n        }\n        if (typeof this.onLangChange !== 'undefined') {\n            this.onLangChange.unsubscribe();\n            this.onLangChange = undefined;\n        }\n        if (typeof this.onDefaultLangChange !== 'undefined') {\n            this.onDefaultLangChange.unsubscribe();\n            this.onDefaultLangChange = undefined;\n        }\n    }\n    ngOnDestroy() {\n        this._dispose();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslatePipe, deps: [{ token: TranslateService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Pipe });\n    static ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslatePipe, name: \"translate\", pure: false });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslatePipe });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslatePipe, decorators: [{\n            type: Injectable\n        }, {\n            type: Pipe,\n            args: [{\n                    name: 'translate',\n                    pure: false // required to update the value when the promise is resolved\n                }]\n        }], ctorParameters: function () { return [{ type: TranslateService }, { type: i0.ChangeDetectorRef }]; } });\n\nclass TranslateModule {\n    /**\n     * Use this method in your root module to provide the TranslateService\n     */\n    static forRoot(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                TranslateStore,\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     */\n    static forChild(config = {}) {\n        return {\n            ngModule: TranslateModule,\n            providers: [\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\n                { provide: USE_STORE, useValue: config.isolate },\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\n                { provide: USE_EXTEND, useValue: config.extend },\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\n                TranslateService\n            ]\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateModule, declarations: [TranslatePipe,\n            TranslateDirective], exports: [TranslatePipe,\n            TranslateDirective] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateModule });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        TranslatePipe,\n                        TranslateDirective\n                    ],\n                    exports: [\n                        TranslatePipe,\n                        TranslateDirective\n                    ]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}